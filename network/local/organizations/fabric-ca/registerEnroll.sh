#!/bin/bash

function createWater_quality_data,UpdatingAndRetrievals,Storage() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-4400-ca-water_quality_data , updating and retrievals,storage.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-4400-ca-water_quality_data , updating and retrievals,storage.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-4400-ca-water_quality_data , updating and retrievals,storage.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-4400-ca-water_quality_data , updating and retrievals,storage.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy water_quality_data , updating and retrievals,storage's CA cert to water_quality_data , updating and retrievals,storage's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/tlscacerts
  cp ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/tlscacerts/ca.crt

  # Copy water_quality_data , updating and retrievals,storage's CA cert to water_quality_data , updating and retrievals,storage's /tlsca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/tlsca
  cp ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/tlsca/tlsca.water_quality_data , updating and retrievals,storage-cert.pem

  # Copy water_quality_data , updating and retrievals,storage's CA cert to water_quality_data , updating and retrievals,storage's /ca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/ca
  cp ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/ca/ca.water_quality_data , updating and retrievals,storage-cert.pem

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ca-water_quality_data , updating and retrievals,storage --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer1"
  set -x
  fabric-ca-client register --caname ca-water_quality_data , updating and retrievals,storage --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer2"
  set -x
  fabric-ca-client register --caname ca-water_quality_data , updating and retrievals,storage --id.name peer2 --id.secret peer2pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering user"
  set -x
  fabric-ca-client register --caname ca-water_quality_data , updating and retrievals,storage --id.name user1 --id.secret user1pw --id.type client --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the org admin"
  set -x
  fabric-ca-client register --caname ca-water_quality_data , updating and retrievals,storage --id.name water_quality_data , updating and retrievals,storageadmin --id.secret water_quality_data , updating and retrievals,storageadminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer0 msp"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/msp --csr.hosts peer0.water_quality_data , updating and retrievals,storage --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer1 msp"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/msp --csr.hosts peer1.water_quality_data , updating and retrievals,storage --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer2 msp"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/msp --csr.hosts peer2.water_quality_data , updating and retrievals,storage --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/msp/config.yaml

  infoln "Generating the peer0-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls --enrollment.profile tls --csr.hosts peer0.water_quality_data , updating and retrievals,storage --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer1-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls --enrollment.profile tls --csr.hosts peer1.water_quality_data , updating and retrievals,storage --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer2-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls --enrollment.profile tls --csr.hosts peer2.water_quality_data , updating and retrievals,storage --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

 # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/signcerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/keystore/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer0.water_quality_data , updating and retrievals,storage/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/signcerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/keystore/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer1.water_quality_data , updating and retrievals,storage/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/signcerts/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/keystore/* ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/peers/peer2.water_quality_data , updating and retrievals,storage/tls/server.key

  infoln "Generating the user msp"

  set -x
  fabric-ca-client enroll -u https://user1:user1pw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/users/User1@water_quality_data , updating and retrievals,storage/msp --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/users/User1@water_quality_data , updating and retrievals,storage/msp/config.yaml

  infoln "Generating the org admin msp"
  set -x
  fabric-ca-client enroll -u https://water_quality_data , updating and retrievals,storageadmin:water_quality_data , updating and retrievals,storageadminpw@localhost:4400 --caname ca-water_quality_data , updating and retrievals,storage -M ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/users/Admin@water_quality_data , updating and retrievals,storage/msp --tls.certfiles ${PWD}/organizations/fabric-ca/water_quality_data , updating and retrievals,storage/ca-cert.pem

  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/msp/config.yaml ${PWD}/organizations/peerOrganizations/water_quality_data , updating and retrievals,storage/users/Admin@water_quality_data , updating and retrievals,storage/msp/config.yaml
}
function createGovernment() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/government/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/government/

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:5500 --caname ca-government --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-5500-ca-government.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-5500-ca-government.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-5500-ca-government.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-5500-ca-government.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/peerOrganizations/government/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy government's CA cert to government's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p ${PWD}/organizations/peerOrganizations/government/msp/tlscacerts
  cp ${PWD}/organizations/fabric-ca/government/ca-cert.pem ${PWD}/organizations/peerOrganizations/government/msp/tlscacerts/ca.crt

  # Copy government's CA cert to government's /tlsca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/government/tlsca
  cp ${PWD}/organizations/fabric-ca/government/ca-cert.pem ${PWD}/organizations/peerOrganizations/government/tlsca/tlsca.government-cert.pem

  # Copy government's CA cert to government's /ca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/government/ca
  cp ${PWD}/organizations/fabric-ca/government/ca-cert.pem ${PWD}/organizations/peerOrganizations/government/ca/ca.government-cert.pem

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ca-government --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer1"
  set -x
  fabric-ca-client register --caname ca-government --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer2"
  set -x
  fabric-ca-client register --caname ca-government --id.name peer2 --id.secret peer2pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering user"
  set -x
  fabric-ca-client register --caname ca-government --id.name user1 --id.secret user1pw --id.type client --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the org admin"
  set -x
  fabric-ca-client register --caname ca-government --id.name governmentadmin --id.secret governmentadminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer0 msp"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/msp --csr.hosts peer0.government --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer1 msp"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/msp --csr.hosts peer1.government --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer2 msp"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/msp --csr.hosts peer2.government --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/government/msp/config.yaml ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/government/msp/config.yaml ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/government/msp/config.yaml ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/msp/config.yaml

  infoln "Generating the peer0-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls --enrollment.profile tls --csr.hosts peer0.government --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer1-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls --enrollment.profile tls --csr.hosts peer1.government --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer2-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls --enrollment.profile tls --csr.hosts peer2.government --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

 # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/signcerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/keystore/* ${PWD}/organizations/peerOrganizations/government/peers/peer0.government/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/signcerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/keystore/* ${PWD}/organizations/peerOrganizations/government/peers/peer1.government/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/signcerts/* ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/keystore/* ${PWD}/organizations/peerOrganizations/government/peers/peer2.government/tls/server.key

  infoln "Generating the user msp"

  set -x
  fabric-ca-client enroll -u https://user1:user1pw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/users/User1@government/msp --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/government/msp/config.yaml ${PWD}/organizations/peerOrganizations/government/users/User1@government/msp/config.yaml

  infoln "Generating the org admin msp"
  set -x
  fabric-ca-client enroll -u https://governmentadmin:governmentadminpw@localhost:5500 --caname ca-government -M ${PWD}/organizations/peerOrganizations/government/users/Admin@government/msp --tls.certfiles ${PWD}/organizations/fabric-ca/government/ca-cert.pem

  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/government/msp/config.yaml ${PWD}/organizations/peerOrganizations/government/users/Admin@government/msp/config.yaml
}
function createIncentives_contrants() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/incentives_contrants/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/incentives_contrants/

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:6600 --caname ca-incentives_contrants --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-6600-ca-incentives_contrants.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-6600-ca-incentives_contrants.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-6600-ca-incentives_contrants.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-6600-ca-incentives_contrants.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy incentives_contrants's CA cert to incentives_contrants's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/tlscacerts
  cp ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/tlscacerts/ca.crt

  # Copy incentives_contrants's CA cert to incentives_contrants's /tlsca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/incentives_contrants/tlsca
  cp ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem ${PWD}/organizations/peerOrganizations/incentives_contrants/tlsca/tlsca.incentives_contrants-cert.pem

  # Copy incentives_contrants's CA cert to incentives_contrants's /ca directory (for use by clients)
  mkdir -p ${PWD}/organizations/peerOrganizations/incentives_contrants/ca
  cp ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem ${PWD}/organizations/peerOrganizations/incentives_contrants/ca/ca.incentives_contrants-cert.pem

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ca-incentives_contrants --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer1"
  set -x
  fabric-ca-client register --caname ca-incentives_contrants --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering peer2"
  set -x
  fabric-ca-client register --caname ca-incentives_contrants --id.name peer2 --id.secret peer2pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering user"
  set -x
  fabric-ca-client register --caname ca-incentives_contrants --id.name user1 --id.secret user1pw --id.type client --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the org admin"
  set -x
  fabric-ca-client register --caname ca-incentives_contrants --id.name incentives_contrantsadmin --id.secret incentives_contrantsadminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer0 msp"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/msp --csr.hosts peer0.incentives_contrants --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer1 msp"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/msp --csr.hosts peer1.incentives_contrants --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the peer2 msp"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/msp --csr.hosts peer2.incentives_contrants --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/msp/config.yaml
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/msp/config.yaml

  infoln "Generating the peer0-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls --enrollment.profile tls --csr.hosts peer0.incentives_contrants --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer1-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer1:peer1pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls --enrollment.profile tls --csr.hosts peer1.incentives_contrants --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null


  infoln "Generating the peer2-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer2:peer2pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls --enrollment.profile tls --csr.hosts peer2.incentives_contrants --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

 # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/signcerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/keystore/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer0.incentives_contrants/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/signcerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/keystore/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer1.incentives_contrants/tls/server.key

  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/ca.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/signcerts/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/server.crt
  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/keystore/* ${PWD}/organizations/peerOrganizations/incentives_contrants/peers/peer2.incentives_contrants/tls/server.key

  infoln "Generating the user msp"

  set -x
  fabric-ca-client enroll -u https://user1:user1pw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/users/User1@incentives_contrants/msp --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml ${PWD}/organizations/peerOrganizations/incentives_contrants/users/User1@incentives_contrants/msp/config.yaml

  infoln "Generating the org admin msp"
  set -x
  fabric-ca-client enroll -u https://incentives_contrantsadmin:incentives_contrantsadminpw@localhost:6600 --caname ca-incentives_contrants -M ${PWD}/organizations/peerOrganizations/incentives_contrants/users/Admin@incentives_contrants/msp --tls.certfiles ${PWD}/organizations/fabric-ca/incentives_contrants/ca-cert.pem

  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/peerOrganizations/incentives_contrants/msp/config.yaml ${PWD}/organizations/peerOrganizations/incentives_contrants/users/Admin@incentives_contrants/msp/config.yaml
}
function createOrderer1() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations/itblanket.org/orderer1

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1


  fabric-ca-client enroll -u https://admin:adminpw@localhost:2200 --caname ca-orderer1 --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem


  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-2200-ca-orderer1.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-2200-ca-orderer1.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-2200-ca-orderer1.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-2200-ca-orderer1.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/tlscacerts/tlsca-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tlsca"
  cp "${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tlsca/tlsca-cert.pem"

  infoln "Registering orderer"
  set -x
  fabric-ca-client register --caname ca-orderer1 --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer1 --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the orderer msp"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2200 --caname ca-orderer1 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/config.yaml

  infoln "Generating the orderer-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2200 --caname ca-orderer1 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls --enrollment.profile tls --csr.hosts orderer1 --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/ca-cert.pem
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/ca.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/signcerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/server.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/keystore/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/server.key

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/tlscacerts
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/tlscacerts/tlsca-cert.pem

  infoln "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:2200 --caname ca-orderer1 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/users/Admin@example.com/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer1/tls-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer1/users/Admin@example.com/msp/config.yaml
}
function createOrderer2() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations/itblanket.org/orderer2

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2


  fabric-ca-client enroll -u https://admin:adminpw@localhost:2201 --caname ca-orderer2 --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem


  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-2201-ca-orderer2.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-2201-ca-orderer2.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-2201-ca-orderer2.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-2201-ca-orderer2.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/tlscacerts/tlsca-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tlsca"
  cp "${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tlsca/tlsca-cert.pem"

  infoln "Registering orderer"
  set -x
  fabric-ca-client register --caname ca-orderer2 --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer2 --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the orderer msp"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2201 --caname ca-orderer2 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/config.yaml

  infoln "Generating the orderer-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2201 --caname ca-orderer2 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls --enrollment.profile tls --csr.hosts orderer2 --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/ca-cert.pem
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/ca.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/signcerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/server.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/keystore/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/server.key

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/tlscacerts
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/tlscacerts/tlsca-cert.pem

  infoln "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:2201 --caname ca-orderer2 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/users/Admin@example.com/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer2/tls-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer2/users/Admin@example.com/msp/config.yaml
}
function createOrderer3() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations/itblanket.org/orderer3

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3


  fabric-ca-client enroll -u https://admin:adminpw@localhost:2202 --caname ca-orderer3 --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem


  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-2202-ca-orderer3.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-2202-ca-orderer3.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-2202-ca-orderer3.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-2202-ca-orderer3.pem
    OrganizationalUnitIdentifier: orderer' >${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/config.yaml

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/tlscacerts/tlsca-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tlsca"
  cp "${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tlsca/tlsca-cert.pem"

  infoln "Registering orderer"
  set -x
  fabric-ca-client register --caname ca-orderer3 --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer3 --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem
  { set +x; } 2>/dev/null

  infoln "Generating the orderer msp"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2202 --caname ca-orderer3 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/config.yaml

  infoln "Generating the orderer-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:2202 --caname ca-orderer3 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls --enrollment.profile tls --csr.hosts orderer3 --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/ca-cert.pem
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/ca.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/signcerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/server.crt
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/keystore/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/server.key

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/tlscacerts
  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/tls/tlscacerts/* ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/tlscacerts/tlsca-cert.pem

  infoln "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:2202 --caname ca-orderer3 -M ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/users/Admin@example.com/msp --tls.certfiles ${PWD}/organizations/fabric-ca/orderer3/tls-cert.pem
  { set +x; } 2>/dev/null

  cp ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/msp/config.yaml ${PWD}/organizations/ordererOrganizations/itblanket.org/orderer3/users/Admin@example.com/msp/config.yaml
}


